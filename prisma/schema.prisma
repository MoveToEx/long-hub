generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum Rating {
  none
  moderate
  violent
}

model post {
  id        String   @id @db.Uuid
  text      String   @db.Text
  image     String   @db.VarChar(255)
  imageHash String   @db.VarChar(255)
  imageURL  String   @db.VarChar(128)
  rating    Rating   @default(none)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deletedAt      DateTime?
  deletionReason String?   @db.Text

  uploaderId Int?

  text_embedding Unsupported("vector(1024)")?

  aliases           alias[]
  uploader          user?              @relation(fields: [uploaderId], references: [id])
  tags              tag[]
  deletion_requests deletion_request[]
}

enum RequestStatus {
  pending
  cancelled
  dismissed
  approved
  revoked
}

model deletion_request {
  id          Int           @id @default(autoincrement())
  reason      String        @db.Text
  status      RequestStatus @default(pending)
  createdAt   DateTime      @default(now())
  processedAt DateTime?

  postId String @db.Uuid
  userId Int

  post post @relation(fields: [postId], references: [id])
  user user @relation(fields: [userId], references: [id])
}

model alias {
  id     Int    @id
  text   String
  postId String @db.Uuid
  post   post   @relation(fields: [postId], references: [id])
}

model tag {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  posts post[]
}

model user {
  id           Int      @id @default(autoincrement())
  email        String?  @db.VarChar(255)
  name         String   @db.VarChar(255)
  permission   Int      @default(0)
  accessKey    String   @unique @db.VarChar(255)
  passwordHash String   @db.VarChar(255)
  createdAt    DateTime @default(now())

  post              post[]
  deletion_requests deletion_request[]
}
